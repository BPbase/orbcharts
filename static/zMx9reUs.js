import{v as F,S as $,m as u,d as h,bc as z,k as x,t as g,l as d,bd as f,I as _,be as b,bf as w}from"./_6lsH1s8.js";const O="GridZoom",P={name:O,defaultParams:_,layerIndex:b,validator:(D,{validateColumns:s})=>({status:"success",columnName:"",expectToBe:""})},E=F(P)(({selection:D,rootSelection:s,name:R,observer:i,subject:A})=>{const r=new $;let n={k:1,x:0,y:0};const l=i.computedData$.pipe(u(o=>o[0]?o[0].length-1:0),h()),M=i.fullDataFormatter$.pipe(u(o=>o.groupAxis),z()),G=x({initGroupAxis:M,groupMaxIndex:l,layout:i.layout$,axisSize:i.gridAxesSize$}).pipe(g(r),d(async o=>o),u(o=>{const p=o.initGroupAxis.scaleDomain[0]-o.initGroupAxis.scalePadding,e=o.initGroupAxis.scaleDomain[1]==="max"?o.groupMaxIndex+o.initGroupAxis.scalePadding:o.initGroupAxis.scaleDomain[1]+o.initGroupAxis.scalePadding;return w({maxValue:o.groupMaxIndex,minValue:0,axisWidth:o.axisSize.width,scaleDomain:[p,e],scaleRange:[0,1]})}));return x({initGroupScale:G,fullDataFormatter:i.fullDataFormatter$,groupMaxIndex:l}).pipe(g(r),d(async o=>o)).subscribe(o=>{const e=o.initGroupScale.copy(),c=f().on("zoom",function(y){const a=y.transform,m=k=>{const S=Math.round(k);return Math.min(o.groupMaxIndex,Math.max(0,S))},t=o.fullDataFormatter.groupAxis.position==="bottom"||o.fullDataFormatter.groupAxis.position==="top"?a.rescaleX(e).domain().map(m):a.rescaleY(e).domain().map(m);t[0]<=0&&t[1]>=o.groupMaxIndex?a.k<n.k&&(a.k=n.k,a.x=n.x,a.y=n.y):t[1]-t[0]<=1&&a.k>n.k&&(a.k=n.k,a.x=n.x,a.y=n.y),n.k=a.k,n.x=a.x,n.y=a.y;const I={...o.fullDataFormatter,groupAxis:{...o.fullDataFormatter.groupAxis,scaleDomain:t}};A.dataFormatter$.next(I)});s.call(c)}),()=>{r.next(void 0),s.call(f().on("zoom",null))}});export{E as G};
