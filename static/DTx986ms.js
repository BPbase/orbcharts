import{k as T,l as b,m,S as D,ar as C,t as $,a as I,s as h,g as P,$ as G,j as L}from"./ZOIXw5Nq.js";import{c as k}from"./BhhwBwE2.js";import{m as O}from"./Cqso8Is8.js";import{o as S}from"./DOdCuVOe.js";function w(i){let s=Math.floor(Math.sqrt(i)),l=Math.ceil(i/s);for(;s*l<i;)l++;return{rowAmount:s,columnAmount:l}}function y(i,s,l){const n=s.columnGap==="auto"?i.left+i.right:s.columnGap,e=s.rowGap==="auto"?i.top+i.bottom:s.rowGap,{rowAmount:o,columnAmount:c}=s.rowAmount*s.columnAmount>=l?s:w(l);return new Array(l).fill(null).map((f,p)=>{const u=p%c,t=Math.floor(p/c),r=(i.width-n*(c-1))/c,a=(i.height-e*(o-1))/o,d=u*r+u*n,x=t*a+t*e,g=[d,x],B=[r/i.width,a/i.height];return{slotIndex:p,rowIndex:t,columnIndex:u,translate:g,scale:B}})}const R=({computedData$:i,fullDataFormatter$:s,layout$:l})=>T({computedData:i,fullDataFormatter:s,layout:l}).pipe(b(async e=>e),m(e=>{if(e.computedData.length===0)return[{slotIndex:0,rowIndex:0,columnIndex:0,translate:[0,0],scale:[1,1]}];if(e.fullDataFormatter.separateSeries)return y(e.layout,e.fullDataFormatter.container,e.computedData.length);{const o=y(e.layout,e.fullDataFormatter.container,1);return e.computedData.map((c,f)=>o[0])}})),E=({fullDataFormatter$:i,layout$:s})=>{const l=new D;function n({xAxis:e,yAxis:o,width:c,height:f}){if(!e||!o)return{translate:[0,0],scale:[1,1],rotate:0,rotateX:0,rotateY:0,value:""};let p=0,u=0,t=0,r=0,a=0;return e.position==="bottom"?o.position==="left"?(r=180,u=f):o.position==="right"?(r=180,a=180,p=c,u=f):(r=180,u=f):e.position==="top"?o.position==="left"||(o.position==="right"?(a=180,p=c):(r=180,u=f)):e.position==="left"?o.position==="bottom"?(t=-90,u=f):o.position==="top"?(t=-90,a=180):(r=180,u=f):e.position==="right"?o.position==="bottom"?(t=-90,r=180,u=f,p=c):o.position==="top"?(t=-90,r=180,a=180,p=c):(r=180,u=f):(r=180,u=f),{translate:[p,u],scale:[1,1],rotate:t,rotateX:r,rotateY:a,value:`translate(${p}px, ${u}px) rotate(${t}deg) rotateX(${r}deg) rotateY(${a}deg)`}}return new C(e=>(T({fullDataFormatter:i,layout:s}).pipe($(l),b(async o=>o)).subscribe(o=>{const c=n({xAxis:o.fullDataFormatter.groupAxis,yAxis:o.fullDataFormatter.valueAxis,width:o.layout.width,height:o.layout.height});e.next(c)}),function(){l.next(void 0)}))},M=({gridAxesTransform$:i})=>i.pipe(m(s=>{const l=[0,0],n=[1/s.scale[0],1/s.scale[1]],e=s.rotate*-1,o=s.rotateX*-1,c=s.rotateY*-1;return{translate:l,scale:n,rotate:e,rotateX:o,rotateY:c,value:`translate(${l[0]}px, ${l[1]}px) rotateX(${o}deg) rotateY(${c}deg) rotate(${e}deg)`}})),F="OverlappingValueAxes",A=P(F,"grid"),_={name:F,defaultParams:G,layerIndex:L,validator:(i,{validateColumns:s})=>{const l=s(i,{firstAxis:{toBeTypes:["object"]},secondAxis:{toBeTypes:["object"]},gridIndexes:{toBe:"[number, number]",test:n=>Array.isArray(n)&&n.length===2}});if(i.firstAxis){const n=s(i.firstAxis,{labelOffset:{toBe:"[number, number]",test:e=>Array.isArray(e)&&e.length===2&&typeof e[0]=="number"&&typeof e[1]=="number"},labelColorType:{toBeOption:"ColorType"},axisLineVisible:{toBeTypes:["boolean"]},axisLineColorType:{toBeOption:"ColorType"},ticks:{toBeTypes:["number"]},tickFormat:{toBeTypes:["string","Function"]},tickLineVisible:{toBeTypes:["boolean"]},tickPadding:{toBeTypes:["number"]},tickFullLine:{toBeTypes:["boolean"]},tickFullLineDasharray:{toBeTypes:["string"]},tickColorType:{toBeOption:"ColorType"},tickTextRotate:{toBeTypes:["number"]},tickTextColorType:{toBeOption:"ColorType"}});if(n.status==="error")return n}if(i.secondAxis){const n=s(i.secondAxis,{labelOffset:{toBe:"[number, number]",test:e=>Array.isArray(e)&&e.length===2&&typeof e[0]=="number"&&typeof e[1]=="number"},labelColorType:{toBeOption:"ColorType"},axisLineVisible:{toBeTypes:["boolean"]},axisLineColorType:{toBeOption:"ColorType"},ticks:{toBeTypes:["number"]},tickFormat:{toBeTypes:["string","Function"]},tickLineVisible:{toBeTypes:["boolean"]},tickPadding:{toBeTypes:["number"]},tickFullLine:{toBeTypes:["boolean"]},tickFullLineDasharray:{toBeTypes:["string"]},tickColorType:{toBeOption:"ColorType"},tickTextRotate:{toBeTypes:["number"]},tickTextColorType:{toBeOption:"ColorType"}});if(n.status==="error")return n}return l}},v=I(_)(({selection:i,name:s,subject:l,observer:n})=>{const e=new D,o=[],c=n.fullParams$.pipe($(e),m(t=>t.gridIndexes[0])),f=n.fullParams$.pipe($(e),m(t=>t.gridIndexes[1])),p=T({firstGridIndex:c,secondGridIndex:f,fullDataFormatter:n.fullDataFormatter$}).pipe($(e),b(async t=>t),m(t=>{t.fullDataFormatter.gridList[t.secondGridIndex]||(t.fullDataFormatter.gridList[t.secondGridIndex]=Object.assign({},t.fullDataFormatter.gridList[t.firstGridIndex]));const r=t.fullDataFormatter.gridList[t.firstGridIndex].valueAxis.position;let a=r;return r==="left"?a="right":r==="bottom"?a="top":r==="top"?a="bottom":r==="right"&&(a="left"),{type:"grid",visibleFilter:t.fullDataFormatter.visibleFilter,...t.fullDataFormatter.gridList[t.secondGridIndex],valueAxis:{...t.fullDataFormatter.gridList[t.secondGridIndex].valueAxis,position:a},container:{...t.fullDataFormatter.container}}}));return S(n).pipe($(e),m(t=>({...t,fullParams$:t.fullParams$.pipe(m(r=>(r.gridIndexes.length>2&&(r.gridIndexes.length=2),r)))})),b(t=>O(t)),m(t=>t.map((r,a)=>{if(a===0)return r;const d=E({fullDataFormatter$:p,layout$:n.layout$}),x=M({gridAxesTransform$:d}),g=R({computedData$:r.computedData$,fullDataFormatter$:p,layout$:n.layout$});return{...r,dataFormatter$:p,gridAxesTransform$:d,gridAxesReverseTransform$:x,gridContainerPosition$:g}}))).pipe($(e)).subscribe(t=>{o.forEach(r=>r()),i.selectAll(`g.${A}`).data(t).join("g").attr("class",A).each((r,a,d)=>{if(a>1)return;const x=h(d[a]);o[a]=k(F,{selection:x,computedData$:r.computedData$,filteredMinMaxValue$:r.filteredMinMaxValue$,fullParams$:n.fullParams$.pipe(m(g=>a===0?g.firstAxis:g.secondAxis)),fullDataFormatter$:r.dataFormatter$,fullChartParams$:n.fullChartParams$,gridAxesTransform$:r.gridAxesTransform$,gridAxesReverseTransform$:r.gridAxesReverseTransform$,gridAxesSize$:r.gridAxesSize$,gridContainerPosition$:r.gridContainerPosition$,isSeriesSeprate$:r.isSeriesSeprate$})})}),()=>{e.next(void 0),o.forEach(t=>t())}}),N={name:"PRESET_MULTI_GRID_BASIC",description:"Basic MultiGrid",descriptionZh:"基本MultiGrid",chartParams:{colors:{light:{label:["#0088FF","#16B59B","#6F3BD5","#EE5F13","#F9B052","#D4785A","#42C724","#FF4B4B","#1F3172","#E23D93"]},dark:{label:["#4BABFF","#7DD3C4","#8454D4","#FF6C6C","#FAC77D","#D58C75","#42C724","#FF8B8B","#5366AC","#FF8DC8"]}},padding:{top:40,right:40,bottom:100,left:80},highlightTarget:"series"},pluginParams:{MultiGridLegend:{placement:"bottom",padding:14,gridList:[{},{listRectHeight:2}]}}};export{v as O,N as P,M as a,R as b,E as g};
