import{q as y,V as P,o as A,v as p,W as h,z as D,A as $,X as b,H as F,y as u,u as C,E as L,I as E,Y as v}from"./DTMfjTug.js";const R=s=>{const{data:e=[],dataFormatter:a,chartParams:n}=s;if(!e.length)return[];let r=[];try{const i=(t,o,m,l)=>{const c=y(a.type,o,m),d=a.seriesLabels[o]||P("series",o),f=A(o,n);return typeof t=="number"?{id:c,index:l,seq:0,label:c,description:"",data:{},value:t,seriesIndex:o,seriesLabel:d,color:f,visible:!0}:{id:t.id?t.id:c,index:l,seq:0,label:t.label?t.label:c,description:t.description,data:t.data??{},value:t.value,seriesIndex:o,seriesLabel:d,color:f,visible:!0}};r=e.map((t,o)=>Array.isArray(t)?t.map((m,l)=>i(m,o,l,r.length+l)):i(t,o,0,r.length)).flat().sort(a.sort??void 0).map((t,o)=>(t.seq=o,t)).map(t=>(t.visible=a.visibleFilter(t,s),t)).sort((t,o)=>t.index-o.index).reduce((t,o)=>(t[o.seriesIndex]||(t[o.seriesIndex]=[]),t[o.seriesIndex].push(o),t),[])}catch(i){throw Error(i)}return r},M=({fullDataFormatter$:s})=>s.pipe(p(e=>e.separateSeries),h()),_=({computedData$:s})=>s.pipe(p(e=>e.filter(a=>a.length).map(a=>a[0].seriesLabel)),h((e,a)=>JSON.stringify(e).length===JSON.stringify(a).length)),S=({computedData$:s})=>s.pipe(p(e=>e.map(a=>a.filter(n=>n.visible!=!1)))),T=({computedData$:s,fullDataFormatter$:e})=>D({computedData:s,fullDataFormatter:e}).pipe($(async a=>a),p(a=>{const n=a.fullDataFormatter.sumSeries==!0?a.computedData.map(r=>[r.reduce((i,t)=>i==null?t:(i.value=i.value+t.value,i),null)]):a.computedData;return a.fullDataFormatter.separateSeries==!0?n.map(r=>r.sort((i,t)=>i.seq-t.seq)):[n.flat().sort((r,i)=>r.seq-i.seq)]})),O=({computedData$:s,fullDataFormatter$:e,layout$:a})=>D({computedData:s,fullDataFormatter:e,layout:a}).pipe($(async r=>r),p(r=>r.fullDataFormatter.separateSeries?b(r.layout,r.fullDataFormatter.container,r.computedData.length):b(r.layout,r.fullDataFormatter.container,1))),x=({seriesContainerPosition$:s,seriesLabels$:e,separateSeries$:a})=>D({seriesContainerPosition:s,seriesLabels:e,separateSeries:a}).pipe($(async n=>n),p(n=>n.separateSeries?new Map(n.seriesLabels.map((r,i)=>[r,n.seriesContainerPosition[i]??n.seriesContainerPosition[0]])):new Map(n.seriesLabels.map((r,i)=>[r,n.seriesContainerPosition[0]])))),q=({subject:s,observer:e})=>{const a=F(e.fullChartParams$).pipe(u(1)),n=M({fullDataFormatter$:e.fullDataFormatter$}),r=S({computedData$:e.computedData$}),i=T({computedData$:e.computedData$,fullDataFormatter$:e.fullDataFormatter$}).pipe(u(1)),t=S({computedData$:i}),o=e.computedData$.pipe(p(g=>g.flat())).pipe(u(1)),m=C({datumList$:o,fullChartParams$:e.fullChartParams$,event$:s.event$}).pipe(u(1)),l=_({computedData$:e.computedData$}),c=L({datumList$:o}).pipe(u(1)),d=O({computedData$:e.computedData$,fullDataFormatter$:e.fullDataFormatter$,layout$:e.layout$}).pipe(u(1)),f=x({seriesContainerPosition$:d,seriesLabels$:l,separateSeries$:n}).pipe(u(1));return{fullParams$:e.fullParams$,fullChartParams$:e.fullChartParams$,fullDataFormatter$:e.fullDataFormatter$,computedData$:e.computedData$,layout$:e.layout$,textSizePx$:a,visibleComputedData$:r,visibleComputedLayoutData$:t,separateSeries$:n,computedLayoutData$:i,seriesHighlight$:m,seriesLabels$:l,SeriesDataMap$:c,seriesContainerPosition$:d,SeriesContainerPositionMap$:f}};class I extends E{constructor(e,a){super({defaultDataFormatter:v,computedDataFn:R,contextObserverFn:q},e,a)}}const w={force:{strength:.03,velocityDecay:.2,collisionSpacing:2},bubbleText:{fillRate:.6,lineHeight:12,lineLengthMin:4},highlightRIncrease:0,bubbleScaleType:"area"},z={outerRadius:.95,innerRadius:0,outerMouseoverRadius:1,enterDuration:800,startAngle:0,endAngle:Math.PI*2,padAngle:.02,cornerRadius:0},B={eventFn:(s,e,a)=>e==="mouseover"||e==="mousemove"?[String(s.datum.value)]:[String(Math.round(s.data.reduce((n,r)=>n+r.reduce((i,t)=>i+(t.value??0),0),0)*a))],textAttrs:[{transform:"translate(0, 0)"}],textStyles:[{"font-weight":"bold","text-anchor":"middle","pointer-events":"none","dominant-baseline":"middle","font-size":64,fill:"#000"}]},H={outerRadius:.95,outerMouseoverRadius:1,startAngle:0,endAngle:Math.PI*2,labelCentroid:2.3,labelColorType:"series",labelFn:s=>String(s.value)},k={position:"right",justify:"end",padding:28,backgroundFill:"none",backgroundStroke:"none",gap:10,listRectWidth:14,listRectHeight:14,listRectRadius:0,textColorType:"primary"};export{B as D,I as S,k as a,H as b,w as c,z as d};
