import{a5 as pt,a6 as mt,a7 as B,a8 as d,a9 as tt,aa as et,ab as w,ac as z,ad as g,ae as dt,af as $t,ag as gt,ah as ft,ai as L,aj as bt,ak as yt,al as Dt,am as Tt,c as At,an as ht,A as Lt,ao as Ct,t as C,S as P,d as b,m as y,p as j,o as _,M as Pt,ap as xt,aq as Gt,e as E,f as I,s as S,J as Bt,L as at,O as St,K as Ft,ar as Rt,N as Mt,n as rt,l as Ot}from"./BmSCDJil.js";import{g as _t,a as Et,b as It,d as kt,e as Ut,f as Nt,h as zt,i as jt,j as wt,k as Ht,l as vt}from"./jlA76nUU.js";import{c as Vt}from"./DxDBhAx3.js";import{c as Wt}from"./MHVJH1VA.js";import{g as F}from"./DQaJP6Gt.js";import{c as Xt}from"./Bwag9Zfg.js";import{c as Yt}from"./C6jaTzsk.js";import{a as qt,c as Jt}from"./DAHtLQSG.js";const Kt=({fullDataFormatter$:o,computedData$:i,layout$:r,fullChartParams$:e,event$:a})=>{const s=new pt,m=mt({datumList$:i.pipe(B(t=>t.flat().flat()),d(1)),fullChartParams$:e,event$:a}).pipe(d(1)),l=it({computedData$:i,fullDataFormatter$:o,layout$:r}).pipe(d(1));return tt({fullDataFormatter:o,computedData:i,multiGridContainer:l}).pipe(et(async t=>t),B(t=>{s.next(void 0);const n=t.fullDataFormatter.gridList[0]??w;return t.computedData.map((u,c)=>{const p=t.fullDataFormatter.gridList[c]??n,$={type:"grid",visibleFilter:t.fullDataFormatter.visibleFilter,grid:{...p},container:{...t.fullDataFormatter.container}},D=z($).pipe(g(s),d(1)),f=z(u).pipe(g(s),d(1)),k=D.pipe(B(N=>N.grid.separateSeries),dt(),d(1)),M=z(t.multiGridContainer[c]).pipe(g(s),d(1)),A=_t({fullDataFormatter$:D,layout$:r}).pipe(g(s),d(1)),T=Et({gridAxesTransform$:A}).pipe(g(s),d(1)),h=It({computedData$:f,fullDataFormatter$:D,layout$:r}).pipe(g(s),d(1)),O=kt({gridContainerPosition$:M,gridAxesTransform$:A,gridGraphicTransform$:h}),U=Ut({fullDataFormatter$:D,layout$:r}).pipe(g(s),d(1)),x=f.pipe(B(N=>N.flat())).pipe(g(s),d(1)),G=Nt({computedData$:f}).pipe(g(s),d(1)),ot=$t({datumList$:x}).pipe(g(s),d(1)),nt=gt({datumList$:x}).pipe(g(s),d(1)),lt=zt({computedData$:f}).pipe(g(s),d(1)),Y=jt({computedData$:f,fullDataFormatter$:D,layout$:r}).pipe(g(s),d(1)),ut=wt({computedLayoutData$:Y}).pipe(g(s),d(1)),ct=Ht({computedData$:f,isSeriesSeprate$:k}).pipe(d(1));return{isSeriesSeprate$:k,gridContainerPosition$:M,gridAxesTransform$:A,gridAxesReverseTransform$:T,gridGraphicTransform$:h,gridGraphicReverseScale$:O,gridAxesSize$:U,gridHighlight$:m,seriesLabels$:G,SeriesDataMap$:ot,GroupDataMap$:nt,dataFormatter$:D,computedData$:f,computedLayoutData$:Y,visibleComputedData$:lt,visibleComputedLayoutData$:ut,computedStackedData$:ct}})}))},it=({computedData$:o,fullDataFormatter$:i,layout$:r})=>tt({computedData:o,fullDataFormatter:i,layout:r}).pipe(et(async e=>e),B(e=>{const a=e.fullDataFormatter.gridList[0]??w,s=e.computedData.reduce((n,u,c)=>{const $=(e.fullDataFormatter.gridList[c]??a).separateSeries?u.length:e.fullDataFormatter.separateGrid?1:0;return n+$},0)||1,m=ft(e.layout,e.fullDataFormatter.container,s);let l=0;return e.computedData.map((n,u)=>{const c=e.fullDataFormatter.gridList[u]??a,p=n.map(($,D)=>{const f=m[l];return c.separateSeries&&(l+=1),f});return!c.separateSeries&&e.fullDataFormatter.separateGrid&&(l+=1),p})})),Qt=o=>{const i=L(o,{visibleFilter:{toBeTypes:["Function"]},gridList:{toBeTypes:["object[]"]},container:{toBeTypes:["object"]},separateGrid:{toBeTypes:["boolean"]}});if(o.gridList){const e=o.gridList.map((a,s)=>{const m=L(a,{seriesDirection:{toBe:'"row" | "column"',test:l=>l==="row"||l==="column"},rowLabels:{toBeTypes:["string[]"]},columnLabels:{toBeTypes:["string[]"]},valueAxis:{toBeTypes:["object"]},groupAxis:{toBeTypes:["object"]},separateSeries:{toBeTypes:["boolean"]}});if(m.status==="error")return m;if(a.valueAxis){const l=L(a.valueAxis,{position:{toBe:'"top" | "bottom" | "left" | "right"',test:t=>t==="top"||t==="bottom"||t==="left"||t==="right"},scaleDomain:{toBe:'[number | "min" | "auto", number | "max" | "auto"]',test:t=>Array.isArray(t)&&t.length===2&&(typeof t[0]=="number"||t[0]==="min"||t[0]==="auto")&&(typeof t[1]=="number"||t[1]==="max"||t[1]==="auto")},scaleRange:{toBe:"[number, number]",test:t=>Array.isArray(t)&&t.length===2&&typeof t[0]=="number"&&typeof t[1]=="number"},label:{toBeTypes:["string"]}});if(l.status==="error")return l}else if(a.groupAxis){const l=L(a.groupAxis,{position:{toBe:'"top" | "bottom" | "left" | "right"',test:t=>t==="top"||t==="bottom"||t==="left"||t==="right"},scaleDomain:{toBe:'[number, number | "max"]',test:t=>Array.isArray(t)&&t.length===2&&typeof t[0]=="number"&&(typeof t[1]=="number"||t[1]==="max")},scalePadding:{toBeTypes:["number"]},label:{toBeTypes:["string"]}});if(l.status==="error")return l}return{status:"success",columnName:"",expectToBe:""}}).find(a=>a.status==="error");if(e.status==="error")return e}if(o.container){const r=L(o.container,{gap:{toBeTypes:["number"]},rowAmount:{toBeTypes:["number"]},columnAmount:{toBeTypes:["number"]}});if(r.status==="error")return r}return i},Zt=o=>{const{data:i=[],dataFormatter:r,chartParams:e}=o;if(!i.length)return[];let a=[];try{const s=r.gridList[0]||w,m=i.map((c,p)=>r.gridList[p]||s),l=i.map((c,p)=>vt(c,m[p])),t=r.separateGrid?l.map((c,p)=>bt({transposedDataGrid:c,dataFormatterGrid:m[p],chartType:"multiGrid"})):l.map((c,p)=>yt({transposedDataGrid:c,dataFormatterGrid:m[p],chartType:"multiGrid",gridIndex:p})),n=new Map;let u=0;t.flat().forEach((c,p)=>{if(!n.has(c)){const $=Dt(u,e);n.set(c,$),u++}}),a=l.map((c,p)=>{const $=t[p],D=Tt({transposedDataGrid:c,dataFormatterGrid:m[p],chartType:"multiGrid",gridIndex:p});let f=0;return c.map((M,A)=>M.map((T,h)=>{const O=At("multiGrid",p,A,h),U=D[h],x=$[A],G={id:T.id?T.id:O,index:f,label:T.label?T.label:O,description:T.description??"",data:T.data,value:T.value,gridIndex:p,seriesIndex:A,seriesLabel:x,groupIndex:h,groupLabel:U,color:n.get(x),visible:!0};return G.visible=r.visibleFilter(G,o),f++,G}))})}catch(s){throw Error(s)}return a},te=o=>L({data:o},{data:{toBe:"DataGrid[]",test:r=>Array.isArray(r)}}),ee=({subject:o,observer:i})=>{const r=ht(i.fullChartParams$).pipe(d(1)),e=Kt({fullDataFormatter$:i.fullDataFormatter$,computedData$:i.computedData$,layout$:i.layout$,fullChartParams$:i.fullChartParams$,event$:o.event$}).pipe(d(1)),a=it({computedData$:i.computedData$,fullDataFormatter$:i.fullDataFormatter$,layout$:i.layout$});return{fullParams$:i.fullParams$,fullChartParams$:i.fullChartParams$,fullDataFormatter$:i.fullDataFormatter$,computedData$:i.computedData$,layout$:i.layout$,textSizePx$:r,multiGridContainerPosition$:a,multiGridEachDetail$:e}};class fe extends Lt{constructor(i,r){super({defaultDataFormatter:Ct,dataFormatterValidator:Qt,computedDataFn:Zt,dataValidator:te,contextObserverCallback:ee},i,r)}}const st="MultiGridLegend",ae={name:st,defaultParams:Pt,layerIndex:xt,validator:(o,{validateColumns:i})=>{const r=i(o,{padding:{toBeTypes:["number"]},backgroundFill:{toBeOption:"ColorType"},backgroundStroke:{toBeOption:"ColorType"},gap:{toBeTypes:["number"]},listRectWidth:{toBeTypes:["number"]},listRectHeight:{toBeTypes:["number"]},listRectRadius:{toBeTypes:["number"]},gridList:{toBeTypes:["object[]"]},textColorType:{toBeOption:"ColorType"}});if(o.gridList){const a=o.gridList.map((s,m)=>i(s,{listRectWidth:{toBeTypes:["number"]},listRectHeight:{toBeTypes:["number"]},listRectRadius:{toBeTypes:["number"]}})).find(s=>s.status==="error");if(a)return a}return r}},be=C(ae)(({selection:o,rootSelection:i,observer:r,subject:e})=>{const a=new P,s=r.multiGridEachDetail$.pipe(b(a),y(n=>n.map((c,p)=>c.SeriesDataMap$.pipe(y($=>Array.from($.keys()))))),j(n=>_(n)),y(n=>n.flat())),m=_({fullParams:r.fullParams$,computedData:r.computedData$}).pipe(b(a),j(async n=>n),y(n=>n.computedData.map((u,c)=>{const p=Gt(n.fullParams.gridList[c]??{},{listRectWidth:n.fullParams.listRectWidth,listRectHeight:n.fullParams.listRectHeight,listRectRadius:n.fullParams.listRectRadius});return u.map($=>p)}).flat())),l=_({fullParams:r.fullParams$,seriesList:m}).pipe(b(a),j(async n=>n),y(n=>({...n.fullParams,seriesList:n.seriesList}))),t=Vt(st,{rootSelection:i,seriesLabels$:s,fullParams$:l,layout$:r.layout$,fullChartParams$:r.fullChartParams$,textSizePx$:r.textSizePx$});return()=>{a.next(void 0),t()}}),R=o=>{const i=o.fullParams$.pipe(y(r=>r.gridIndexes),E(),I(1));return _({multiGridEachDetail:o.multiGridEachDetail$,gridIndexes:i}).pipe(y(r=>r.gridIndexes==="all"?r.multiGridEachDetail:r.gridIndexes.map(e=>r.multiGridEachDetail[e]??r.multiGridEachDetail[0])))},H="MultiBars",q=F(H,"grid"),re={name:H,defaultParams:Bt,layerIndex:at,validator:(o,{validateColumns:i})=>i(o,{gridIndexes:{toBe:'number[] | "all"',test:e=>e==="all"||Array.isArray(e)&&e.every(a=>typeof a=="number")},barWidth:{toBeTypes:["number"]},barPadding:{toBeTypes:["number"]},barGroupPadding:{toBeTypes:["number"]},barRadius:{toBeTypes:["number","boolean"]}})},ye=C(re)(({selection:o,name:i,subject:r,observer:e})=>{const a=new P,s=[];return R(e).pipe(b(a)).subscribe(l=>{s.forEach(t=>t()),o.selectAll(`g.${q}`).data(l).join("g").attr("class",q).each((t,n,u)=>{const c=S(u[n]),p=t.dataFormatter$.pipe(b(a),y($=>$.grid.separateSeries),E(),I(1));s[n]=Wt(H,{selection:c,computedData$:t.computedData$,visibleComputedData$:t.visibleComputedData$,computedLayoutData$:t.computedLayoutData$,visibleComputedLayoutData$:t.visibleComputedLayoutData$,seriesLabels$:t.seriesLabels$,SeriesDataMap$:t.SeriesDataMap$,GroupDataMap$:t.GroupDataMap$,fullParams$:e.fullParams$,fullChartParams$:e.fullChartParams$,gridAxesTransform$:t.gridAxesTransform$,gridGraphicTransform$:t.gridGraphicTransform$,gridGraphicReverseScale$:t.gridGraphicReverseScale$,gridAxesSize$:t.gridAxesSize$,gridHighlight$:t.gridHighlight$,gridContainerPosition$:t.gridContainerPosition$,isSeriesSeprate$:p,event$:r.event$})})}),()=>{a.next(void 0),s.forEach(l=>l())}}),v="MultiLines",J=F(v,"grid"),ie={name:v,defaultParams:St,layerIndex:at,validator:(o,{validateColumns:i})=>i(o,{gridIndexes:{toBe:'number[] | "all"',test:e=>e==="all"||Array.isArray(e)&&e.every(a=>typeof a=="number")},lineCurve:{toBeTypes:["string"]},lineWidth:{toBeTypes:["number"]}})},De=C(ie)(({selection:o,rootSelection:i,name:r,subject:e,observer:a})=>{const s=new P,m=[],l=a.multiGridContainerPosition$.pipe(b(s),y(n=>n.flat()));return R(a).pipe(b(s)).subscribe(n=>{m.forEach(u=>u()),o.selectAll(`g.${J}`).data(n).join("g").attr("class",J).each((u,c,p)=>{const $=S(p[c]);m[c]=Xt(v,{selection:$,computedData$:u.computedData$,computedLayoutData$:u.computedLayoutData$,visibleComputedData$:u.visibleComputedData$,visibleComputedLayoutData$:u.visibleComputedLayoutData$,seriesLabels$:u.seriesLabels$,SeriesDataMap$:u.SeriesDataMap$,GroupDataMap$:u.GroupDataMap$,fullDataFormatter$:u.dataFormatter$,fullParams$:a.fullParams$,fullChartParams$:a.fullChartParams$,gridAxesTransform$:u.gridAxesTransform$,gridGraphicTransform$:u.gridGraphicTransform$,gridAxesSize$:u.gridAxesSize$,gridHighlight$:u.gridHighlight$,gridContainerPosition$:u.gridContainerPosition$,allContainerPosition$:l,layout$:a.layout$,event$:e.event$})})}),()=>{s.next(void 0),m.forEach(n=>n())}}),V="MultiDots",K=F(V,"grid"),se={name:V,defaultParams:Ft,layerIndex:Rt,validator:(o,{validateColumns:i})=>i(o,{gridIndexes:{toBe:'number[] | "all"',test:e=>e==="all"||Array.isArray(e)&&e.every(a=>typeof a=="number")},radius:{toBeTypes:["number"]},fillColorType:{toBeOption:"ColorType"},strokeColorType:{toBeOption:"ColorType"},strokeWidth:{toBeTypes:["number"]},onlyShowHighlighted:{toBeTypes:["boolean"]}})},Te=C(se)(({selection:o,name:i,subject:r,observer:e})=>{const a=new P,s=[];return R(e).pipe(b(a)).subscribe(l=>{s.forEach(t=>t()),o.selectAll(`g.${K}`).data(l).join("g").attr("class",K).each((t,n,u)=>{const c=S(u[n]);s[n]=Yt(V,{selection:c,computedData$:t.computedData$,visibleComputedData$:t.visibleComputedData$,computedLayoutData$:t.computedLayoutData$,visibleComputedLayoutData$:t.visibleComputedLayoutData$,seriesLabels$:t.seriesLabels$,SeriesDataMap$:t.SeriesDataMap$,GroupDataMap$:t.GroupDataMap$,fullParams$:e.fullParams$,fullChartParams$:e.fullChartParams$,gridAxesTransform$:t.gridAxesTransform$,gridGraphicTransform$:t.gridGraphicTransform$,gridGraphicReverseScale$:t.gridGraphicReverseScale$,gridAxesSize$:t.gridAxesSize$,gridHighlight$:t.gridHighlight$,gridContainerPosition$:t.gridContainerPosition$,event$:r.event$})})}),()=>{a.next(void 0),s.forEach(l=>l())}}),W="MultiGroupAxis",Q=F(W,"grid"),oe={name:W,defaultParams:Mt,layerIndex:rt,validator:(o,{validateColumns:i})=>i(o,{gridIndexes:{toBe:'number[] | "all"',test:e=>e==="all"||Array.isArray(e)&&e.every(a=>typeof a=="number")},labelOffset:{toBe:"[number, number]",test:e=>Array.isArray(e)&&e.length===2&&typeof e[0]=="number"&&typeof e[1]=="number"},labelColorType:{toBeOption:"ColorType"},axisLineVisible:{toBeTypes:["boolean"]},axisLineColorType:{toBeOption:"ColorType"},ticks:{toBe:'number | null | "all"',test:e=>e===null||e==="all"||typeof e=="number"},tickFormat:{toBeTypes:["string","Function"]},tickLineVisible:{toBeTypes:["boolean"]},tickPadding:{toBeTypes:["number"]},tickFullLine:{toBeTypes:["boolean"]},tickFullLineDasharray:{toBeTypes:["string"]},tickColorType:{toBeOption:"ColorType"},tickTextRotate:{toBeTypes:["number"]},tickTextColorType:{toBeOption:"ColorType"}})},Ae=C(oe)(({selection:o,name:i,subject:r,observer:e})=>{const a=new P,s=[];return R(e).pipe(b(a)).subscribe(l=>{s.forEach(t=>t()),o.selectAll(`g.${Q}`).data(l).join("g").attr("class",Q).each((t,n,u)=>{const c=S(u[n]),p=t.dataFormatter$.pipe(b(a),y($=>$.grid.separateSeries),E(),I(1));s[n]=qt(W,{selection:c,computedData$:t.computedData$,fullParams$:e.fullParams$,fullDataFormatter$:t.dataFormatter$,fullChartParams$:e.fullChartParams$,gridAxesTransform$:t.gridAxesTransform$,gridAxesReverseTransform$:t.gridAxesReverseTransform$,gridAxesSize$:t.gridAxesSize$,gridContainerPosition$:t.gridContainerPosition$,isSeriesSeprate$:p,textSizePx$:e.textSizePx$})})}),()=>{a.next(void 0),s.forEach(l=>l())}}),X="MultiValueAxis",Z=F(X,"grid"),ne={name:X,defaultParams:Ot,layerIndex:rt,validator:(o,{validateColumns:i})=>i(o,{gridIndexes:{toBe:'number[] | "all"',test:e=>e==="all"||Array.isArray(e)&&e.every(a=>typeof a=="number")},labelOffset:{toBe:"[number, number]",test:e=>Array.isArray(e)&&e.length===2&&typeof e[0]=="number"&&typeof e[1]=="number"},labelColorType:{toBeOption:"ColorType"},axisLineVisible:{toBeTypes:["boolean"]},axisLineColorType:{toBeOption:"ColorType"},ticks:{toBeTypes:["number","null"]},tickFormat:{toBeTypes:["string","Function"]},tickLineVisible:{toBeTypes:["boolean"]},tickPadding:{toBeTypes:["number"]},tickFullLine:{toBeTypes:["boolean"]},tickFullLineDasharray:{toBeTypes:["string"]},tickColorType:{toBeOption:"ColorType"},tickTextRotate:{toBeTypes:["number"]},tickTextColorType:{toBeOption:"ColorType"}})},he=C(ne)(({selection:o,name:i,subject:r,observer:e})=>{const a=new P,s=[];return R(e).pipe(b(a)).subscribe(l=>{s.forEach(t=>t()),o.selectAll(`g.${Z}`).data(l).join("g").attr("class",Z).each((t,n,u)=>{const c=S(u[n]),p=t.dataFormatter$.pipe(b(a),y($=>$.grid.separateSeries),E(),I(1));s[n]=Jt(X,{selection:c,computedData$:t.computedData$,fullParams$:e.fullParams$,fullDataFormatter$:t.dataFormatter$,fullChartParams$:e.fullChartParams$,gridAxesTransform$:t.gridAxesTransform$,gridAxesReverseTransform$:t.gridAxesReverseTransform$,gridAxesSize$:t.gridAxesSize$,gridContainerPosition$:t.gridContainerPosition$,isSeriesSeprate$:p})})}),()=>{a.next(void 0),s.forEach(l=>l())}});export{ye as M,Te as a,be as b,Ae as c,De as d,he as e,fe as f,R as m};
