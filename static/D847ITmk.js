import{k as t,l as h,n as R,o as T,q as b,A as L,D as S,d as F,S as P,t as u,m as d}from"./C8v8pqyL.js";import{i as _,b as C,c as k,d as x,e as G,f as E,h as O,j as M,k as U,l as I}from"./BUC-jAqX.js";import{h as W}from"./DupVaP3I.js";const V=({subject:r,observer:a})=>{const e=_({computedData$:a.computedData$,fullDataFormatter$:a.fullDataFormatter$}).pipe(t(1)),n=C({computedData$:a.computedData$,fullDataFormatter$:a.fullDataFormatter$,fullChartParams$:a.fullChartParams$,layout$:a.layout$}),s=k({fullDataFormatter$:a.fullDataFormatter$,layout$:a.layout$}).pipe(t(1)),c=x({gridAxesTransform$:s}).pipe(t(1)),o=G({computedData$:a.computedData$,fullDataFormatter$:a.fullDataFormatter$,layout$:a.layout$}).pipe(t(1)),p=E({gridContainer$:n,gridAxesTransform$:s,gridGraphicTransform$:o}),i=O({fullDataFormatter$:a.fullDataFormatter$,layout$:a.layout$}).pipe(t(1)),l=a.computedData$.pipe(h(g=>g.flat())).pipe(t(1)),$=R({datumList$:l,fullChartParams$:a.fullChartParams$,event$:r.event$}).pipe(t(1)),A=M({computedData$:a.computedData$}),D=T({datumList$:l}).pipe(t(1)),f=b({datumList$:l}).pipe(t(1)),y=U({computedData$:a.computedData$}).pipe(t(1));return{fullParams$:a.fullParams$,fullChartParams$:a.fullChartParams$,fullDataFormatter$:a.fullDataFormatter$,computedData$:a.computedData$,layout$:a.layout$,isSeriesPositionSeprate$:e,gridContainer$:n,gridAxesTransform$:s,gridAxesReverseTransform$:c,gridGraphicTransform$:o,gridGraphicReverseScale$:p,gridAxesSize$:i,gridHighlight$:$,existedSeriesLabels$:A,SeriesDataMap$:D,GroupDataMap$:f,visibleComputedData$:y}};class X extends L{constructor(a,e){super({defaultDataFormatter:S,computedDataFn:I,contextObserverFn:V},a,e)}}const z={lineCurve:"curveLinear",lineWidth:2},K={radius:4,fillColorType:"white",strokeColorType:"series",strokeWidth:2,onlyShowHighlighted:!1},q={showLine:!0,showLabel:!0,lineDashArray:"3, 3",lineColorType:"primary",labelColorType:"primary",labelTextColorType:"background",labelTextFormat:r=>r,labelPadding:24},v={barWidth:0,barPadding:1,barGroupPadding:40,barRadius:!1},J={barWidth:0,barGroupPadding:10,barRadius:!1},Q={barWidth:0,barPadding:1,barGroupPadding:20,linearGradientOpacity:[1,0]},Y={labelOffset:[0,0],labelColorType:"primary",axisLineVisible:!0,axisLineColorType:"primary",tickFormat:r=>r,tickLineVisible:!0,tickPadding:20,tickFullLine:!1,tickFullLineDasharray:"none",tickColorType:"secondary",tickTextRotate:0,tickTextColorType:"primary"},j={labelOffset:[0,0],labelColorType:"primary",axisLineVisible:!1,axisLineColorType:"primary",ticks:4,tickFormat:",.0f",tickLineVisible:!0,tickPadding:20,tickFullLine:!0,tickFullLineDasharray:"none",tickColorType:"secondary",tickTextRotate:0,tickTextColorType:"primary"},Z=j,aa={},w={position:"right",justify:"end",padding:28,backgroundFill:"none",backgroundStroke:"none",gap:10,listRectWidth:14,listRectHeight:14,listRectRadius:0},m="GridLegend",ta=F(m,w)(({selection:r,rootSelection:a,observer:e,subject:n})=>{const s=new P,c=e.SeriesDataMap$.pipe(u(s),d(i=>Array.from(i.keys()))),o=e.fullParams$.pipe(u(s),d(i=>{const l=[{listRectWidth:i.listRectWidth,listRectHeight:i.listRectHeight,listRectRadius:i.listRectRadius}];return{...i,seriesList:l}})),p=W(m,{rootSelection:a,seriesLabels$:c,fullParams$:o,layout$:e.layout$,fullChartParams$:e.fullChartParams$});return()=>{s.next(void 0),p()}});export{K as D,X as G,Z as a,ta as b,Y as c,j as d,aa as e,q as f,v as g,J as h,Q as i,z as j};
