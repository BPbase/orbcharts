import{S as F,a as $,m as u,d as h,bh as z,k as x,t as g,l as d,bi as D,I as _,bj as b,bk as w}from"./DthhAFdh.js";const O="GroupZoom",P={name:O,defaultParams:_,layerIndex:b,validator:(f,{validateColumns:e})=>({status:"success",columnName:"",expectToBe:""})},C=F(P)(({selection:f,rootSelection:e,name:R,observer:i,subject:A})=>{const r=new $;let n={k:1,x:0,y:0};const l=i.computedData$.pipe(u(o=>o[0]?o[0].length-1:0),h()),M=i.fullDataFormatter$.pipe(u(o=>o.groupAxis),z()),G=x({initGroupAxis:M,groupMaxIndex:l,layout:i.layout$,axisSize:i.gridAxesSize$}).pipe(g(r),d(async o=>o),u(o=>{const p=o.initGroupAxis.scaleDomain[0]-o.initGroupAxis.scalePadding,s=o.initGroupAxis.scaleDomain[1]==="max"?o.groupMaxIndex+o.initGroupAxis.scalePadding:o.initGroupAxis.scaleDomain[1]+o.initGroupAxis.scalePadding;return w({maxValue:o.groupMaxIndex,minValue:0,axisWidth:o.axisSize.width,scaleDomain:[p,s],scaleRange:[0,1]})}));return x({initGroupScale:G,fullDataFormatter:i.fullDataFormatter$,groupMaxIndex:l}).pipe(g(r),d(async o=>o)).subscribe(o=>{const s=o.initGroupScale.copy(),c=D().on("zoom",function(k){const a=k.transform,m=I=>{const S=Math.round(I);return Math.min(o.groupMaxIndex,Math.max(0,S))},t=o.fullDataFormatter.groupAxis.position==="bottom"||o.fullDataFormatter.groupAxis.position==="top"?a.rescaleX(s).domain().map(m):a.rescaleY(s).domain().map(m);t[0]<=0&&t[1]>=o.groupMaxIndex?a.k<n.k&&(a.k=n.k,a.x=n.x,a.y=n.y):t[1]-t[0]<=1&&a.k>n.k&&(a.k=n.k,a.x=n.x,a.y=n.y),n.k=a.k,n.x=a.x,n.y=a.y;const y={...o.fullDataFormatter,groupAxis:{...o.fullDataFormatter.groupAxis,scaleDomain:t}};A.dataFormatter$.next(y)});e.call(c)}),()=>{r.next(void 0),e.call(D().on("zoom",null))}});export{C as G};
